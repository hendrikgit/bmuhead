name: Create a release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux-win:
    runs-on: ubuntu-20.04
    env:
      NIMVER: "1.4.2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache nim
        uses: actions/cache@v2
        id: cache
        with:
          key: build-${{ runner.os }}-nim-${{ env.NIMVER }}
          path: nim

      - name: Install apt packages
        run: sudo apt-get install -y --no-install-recommends musl-tools mingw-w64

      - name: Download and setup nim
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir nim
          cd nim
          wget https://nim-lang.org/download/nim-$NIMVER-linux_x64.tar.xz
          tar xf nim-$NIMVER-linux_x64.tar.xz

      - name: Compile for Windows
        run: PATH="$PWD/nim/nim-$NIMVER/bin:$PATH" VERSION=$(git rev-parse --short HEAD) nimble build -d:release -d:mingw

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v2
        with:
          name: bmuhead.windows
          path: bmuhead.exe

      - name: Compile for Linux
        run: PATH="$PWD/nim/nim-$NIMVER/bin:$PATH" VERSION=$(git rev-parse --short HEAD) nimble build -d:release --gcc.exe:musl-gcc --gcc.linkerexe:musl-gcc --passL:-static

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        with:
          name: bmuhead.linux
          path: bmuhead

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install nim
        run: brew install nim

      - name: Compile for macOS
        run: VERSION=$(git rev-parse --short HEAD) nimble build -d:release

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v2
        with:
          name: bmuhead.macos
          path: bmuhead

  release:
    needs: [build-linux-win, build-macos]
    runs-on: ubuntu-20.04
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: bmuhead.linux

      - name: Pack Linux artifact
        # the executable flag is removed on artifact upload
        run: |
          chmod +x bmuhead
          zip bmuhead.linux.zip bmuhead

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: bmuhead.windows

      - name: Pack Windows artifact
        run: zip bmuhead.windows.zip bmuhead.exe

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: bmuhead.macos

      - name: Pack macOS artifact
        run: |
          chmod +x bmuhead
          zip bmuhead.macos.zip bmuhead

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bmuhead.linux.zip
          asset_name: bmuhead.linux.zip
          asset_content_type: application/zip

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bmuhead.macos.zip
          asset_name: bmuhead.macos.zip
          asset_content_type: application/zip

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bmuhead.windows.zip
          asset_name: bmuhead.windows.zip
          asset_content_type: application/zip
